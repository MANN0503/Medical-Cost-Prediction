# -*- coding: utf-8 -*-
"""Medical Cost Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rbt4A8AUHd6lpRlveeuRTF0ZOEYWlmCd

## 1. Introduction

#### XYZ Health Insurance Co. Ltd.
**Company Introduction**

**XYZ Health Insurance Co. Ltd.** is one of the prominent insurance providers in the country.
Offering impressive health plans and services to cater to the needs of different people.
The insurance company also provides access to fitness assessment centers, wellness centers, diagnostic centers in addition to hospitalization centers.

**Current Scenario**

The company is planning to introduce a new system that will help to easily monitor and predict the medical insurance prices of their customers.

## 2. Problem Statement
The current process suffers from the following problems:
- The company uses manpower to predict the medical expenses of its insurers. Many factors are considered such as age, BMI, smoking habits, number of children, etc.
- It is a time and resource-intensive process and many times, inaccurate.
- The company plans to modernize its legacy systems and wants to implement an automated way of predicting the medical expenses of its insurers based on various factors.

## 3.  Project Deliverables

- Deliverable: Predicts the medical charges of insurers.
- Machine Learning Task: Regression
- Target Variable: charges
- Win Condition: N/A (best possible model)


## 4.  Evaluation Metric
- The model evaluation will be based on the R2 score.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""### Dataset feature Description

|**Column Name**|**Description**|
|:--|:--
|**age**|Indicates the age of the primary beneficiary|
|**sex**|Indicates the gender of the insurance contractor|
|**bmi**|Indicates the BMI of the beneficiary|
|**children**|Indicates number of children covered by health insurance / Number of dependents|
|**smoker**|Indicates whether the beneficiary has smoking habits?|
|**region**|Indicates the region of residence of the beneficiary|
|**id**|Indicates the unique beneficiary id|
|**charges**|Indicates the individual medical costs billed by health insurance|
"""

df_train= pd.read_csv('train_data.csv')
df_train.shape

df_train.head(4)

df_test=pd.read_csv('test_data.csv')
df_test.shape

df_test.head(4)

df_train.info()

df_test.info()

df_train.isnull().sum()

df_test.isnull().sum()

df_train.describe(include='all')

df_train.dtypes

df_train['sex'].value_counts()

df_train['smoker'].value_counts()

df_train['region'].value_counts()

df_train_copy = df_train.copy()

#Converting catagorical values into numeric

new_data = {'sex':{'male': 0, 'female': 1},
           'smoker':{'no':0, 'yes':1},
           'region':{'southeast':0, 'northeast':1,'southwest':2,'northwest':3}}

df_train_copy = df_train.copy()
df_train_copy.replace(new_data, inplace=True)

df_train_copy.head()

df_train_copy.describe()

x= df_train_copy.corr()
x

import seaborn as sns
plt.figure(figsize=(10,8))
sns.heatmap(x, annot=True, cmap='BuPu')

"""###### Impact on health and life insurance premium
- Since smokers pose a greater risk of contacting this wide array of diseases mentioned above, it makes them more prone to health complications
- Most insurers will charge a higher premium amount for smokers compared to non-smokers
- Smokers are highly related with insurance charges
"""

print(df_train['sex'].value_counts().sort_values())
print(df_train['smoker'].value_counts().sort_values())
print(df_train['region'].value_counts().sort_values())

"""#### 1. Region

###### A. Which region has the most number of beneficiaries in the training set?
"""

df_train_copy['region'].value_counts()

plt.figure(figsize=(14,8))
sns.barplot(x='region', y='charges', data=df_train_copy, palette='Set1')

"""- Southeast region has the most number of beneficiaries

###### B. Which region has highest and least number of smokers?
"""

plt.figure(figsize=(14,7))
sns.barplot(x='region', y='smoker',hue='sex',data=df_train_copy, palette='Set2')

"""- Southeast region has the highest and northwest has the least number of smokers with males as prominent smokers

#### 2. Age

###### A. What's the mean and median value of the age feature?
"""

df_train['age'].mean()

df_train['age'].median()

plt.figure(figsize=(14,7))
sns.distplot(df_train['age'])

"""###### B. How age is related with the charges?"""

plt.figure(figsize=(14,7))
sns.lineplot(x='age', y='charges', data=df_train_copy, palette='Set3')

"""- Age is one of the primary factors influencing the life insurance premium rate, whether seeking a term or permanent policy.
- Typically, the premium amount increases average about 8% to 10% for every year of age;
- It can be as low as 5% annually if beneficiary is in 40s, and as high as 12% annually or if over age 50.

#### 3. BMI (Body Mass Index)

###### A. What is the median value of the bmi feature?
"""

df_train_copy['bmi'].median()

plt.figure(figsize=(14,8))
sns.distplot(df_train_copy['bmi'], color='g')

"""###### B. How BMI will affect medical insurance?"""

plt.figure(figsize=(14,9))
sns.scatterplot(x='bmi', y='charges', hue='sex', data=df_train_copy, palette='Reds')

"""- A higher BMI means that the individual is at a higher risk of heart diseases and might frequently visit the hospitals due to weight-related issues.
- People with a body mass index (BMI) of 30 or higher can expect to pay more each month for health insurance.
- In some cases,Health insurance for obese people costs 25 to 50 percent more than coverage for people with a BMI below 30.

#### 4. Gender

##### A. What's the gender ratio?
"""

df_train_copy['sex'].value_counts()

df_train_copy['sex'].value_counts().plot(kind='pie',
                                         figsize=(16,7), autopct='%1.1f%%',
                                         explode=(0,0), fontsize=13)
plt.title('Gender Ratio', fontsize=20)

"""- The ratio of male (51%)gender is higher than female(49%)

#### 5. Smokers

###### A. What's percentage of smokers?
"""

df_train_copy['smoker'].value_counts()

df_train_copy['smoker'].value_counts().plot(kind='pie',
                                         figsize=(16,7), autopct='%1.1f%%',
                                         explode=(0,0), fontsize=13)
plt.title('Percentage of Smokers', fontsize=20)

"""#### 6. Charges"""

plt.figure(figsize=(14,8))
sns.distplot(df_train_copy['charges'], color='r')

plt.figure(figsize=(14,9))
sns.barplot(x='smoker', y='charges', hue='sex', data=df_train_copy, palette='Blues')

"""- As smoking is highly related to health disorders, like cancer, heart disease, stroke, lung diseases, diabetes, and chronic obstructive pulmonary disease (COPD), which includes emphysema and chronic bronchitis.
- Smoking also increases risk for tuberculosis, certain eye diseases, and problems of the immune system, including rheumatoid arthritis.
- Most of the health insurance companies are allowed to charge smokers up to 50% more for premiums.

#### Overall Analysis
- Rising cost of medical treatment has been a significant rise in the number of people buying a health insurance policy.
- Premium rates will be increased if the customer has high BMI.
- People with high BMI are at risk of serious ailments, such as heart diseases, type 2 diabetes, breathing problems, hypertension, and cancer.

#### Future Insights
- Premium payments depends on type of health insurance cover the buyers choose. The premium amount will increase if the customers have purchased add-on covers.
- Individual or group insurance has low premium rate, while family floater has high premium rate.

### Model Evalution

###### Preparing X and y for training and testing
"""

df_train.head()

"""###### Dropping least important feature of the dataset"""

df_train = df_train.drop('region', axis=1)
df_train

"""###### Label encoding for “sex” and “smoker”"""

from sklearn.preprocessing import LabelEncoder

le = LabelEncoder()
df_train['sex'] = le.fit_transform(df_train['sex'])
df_train['smoker'] = le.fit_transform(df_train['smoker'])

df_train.head()

feature_cols = ['age','sex','bmi','children','smoker','id']
X = df_train[feature_cols]
X

y = df_train['charges']
y

y.head()

print(X.shape)
print(y.shape)

"""###### Splitting Dataset into testing and training"""

from sklearn.model_selection import train_test_split

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2, random_state=30)

X_train.head()

X_test.head()

y_train.head()

y_test.head()

"""###### Applying StandardScalar to X_train and y_test"""

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()

df_train.columns

X_train = scaler.fit_transform(X_train)
X_test = scaler.fit_transform(X_test)

"""###### Applying Linear Regression"""

from sklearn.linear_model import LinearRegression

lr = LinearRegression()
lr

lr.fit(X_train, y_train)

"""###### Interpreting Model Coefficients"""

lr.intercept_

lr.coef_

feature_cols

feature_cols.insert(0,'Intercept')
feature_cols

coef = lr.coef_.tolist()
coef

coef.insert(0,lr.intercept_)
coef

eq1 = zip(feature_cols, coef)

for c1, c2 in eq1:
    print(c1,c2)

"""###### Using the Model for Prediction"""

y_pred_train = lr.predict(X_train)

y_pred_test = lr.predict(X_test)

y_pred_train

y_pred_test

X_test

"""###### y = 13235.757551197006 + age * 3601.5401666170856 + sex * 127.25478304212501 + bmi * 1927.3318761341295 + children * 546.4395680810161 + smoker * 9678.806637558071 + id * 275.26348393926503"""

y = 13235.757551197006 + (0.53889385 * 3601.5401666170856) + (-0.92796073 * 127.25478304212501) + (0.37232702 * 1927.3318761341295) + (-0.11773266 * 546.4395680810161) + (-0.5216818 * 9678.806637558071) + (1.06965852 * 275.26348393926503)
y

"""###### Model evaluation"""

from sklearn.metrics import mean_absolute_error, mean_squared_error

MAE_train = mean_absolute_error(y_train, y_pred_train)
MAE_test = mean_absolute_error(y_test, y_pred_test)

print('MAE for training set is {}'.format(MAE_train))
print('MAE for test set is {}'.format(MAE_test))

MSE_train = mean_squared_error(y_train, y_pred_train)
MSE_test = mean_squared_error(y_test, y_pred_test)

print('MSE for training set is {}'.format(MSE_train))
print('MSE for testing is {}'.format(MSE_test))

"""###### Model Evaluation using Rsquared value"""

from sklearn.metrics import r2_score

r2_score_train = r2_score(y_train, y_pred_train)
r2_score_test = r2_score(y_test, y_pred_test)

r2_score_train

r2_score_test

print('Rsquared value for training set is {}'.format(r2_score_train))
print('Rsquared for testing set is {}'.format(r2_score_test))

"""###### Applying Random Forest Regressor"""

df_train_copy.head()

X_ = df_train_copy.drop('charges',axis=1).values
y_ = df_train_copy['charges'].values.reshape(-1,1)

from sklearn.model_selection import train_test_split
X_train_, X_test_, y_train_, y_test_ = train_test_split(X_,y_,test_size=0.2, random_state=42)

print('Size of X_train_ : ', X_train_.shape)
print('Size of y_train_ : ', y_train_.shape)
print('Size of X_test_ : ', X_test_.shape)
print('Size of Y_test_ : ', y_test_.shape)

from sklearn.ensemble import RandomForestRegressor
from sklearn.datasets import make_regression
from sklearn.model_selection import GridSearchCV

rf_reg = RandomForestRegressor(max_depth=50, min_samples_leaf=12, min_samples_split=7,
                       n_estimators=1200)
rf_reg.fit(X_train_, y_train_.ravel())

y_pred_rf_train_ = rf_reg.predict(X_train_)
y_pred_rf_train_

y_pred_rf_test_ = rf_reg.predict(X_test_)
y_pred_rf_test_

r2_score_rf_train_ = r2_score(y_train_, y_pred_rf_train_)
r2_score_rf_test_ = r2_score(y_test_, y_pred_rf_test_)

print('R2 score (train) : {0:.3f}'.format(r2_score_rf_train_))
print('R2 score (test) : {0:.3f}'.format(r2_score_rf_test_))

models = [('Linear Regression', r2_score_train, r2_score_test),
          ('Random Forest Regression', r2_score_rf_train_, r2_score_rf_test_)]

predict = pd.DataFrame(data = models, columns=['Model', 'R2_Score(training)', 'R2_Score(test)'])
predict

from pandas import read_excel
submission = pd.read_excel(r'C:\Users\LENOVO\Desktop\Medical-Cost-Prediction-main\Medical-Cost-Prediction-main\sample_submission.csv.xlsx')
submission

def UniqueResults(dataframe):
    df = pd.DataFrame()
    for col in dataframe:
        S=pd.Series(dataframe[col].unique())
        df[col]=S.values
    return df

final_predictions = y_pred_test
final_predictions

final_predictions_rf = y_pred_rf_test_
final_predictions_rf

output_rf = {'id':df_test.index, 'charges':y_pred_rf_test_}
output_rf

df_rf=pd.DataFrame.from_dict(output_rf, orient='index')
df_rf

df_rf.transpose()

file_rf= df_rf.transpose().to_csv('Medical Cost Prediction.csv', index=False, header=False)
file_rf

